
Ax = b 꼴의 선형 연립 방정식 풀기 

  선형연립방정식 (미지수로 이루어진 1차식) 
  동차선형연립방정식 (상수항 전부 0)(항상 해를 가짐)
  
  선형방정식의 해 / 해집합 (유일해 / 무수히 많은해 / 해 없는경우)
 
 ㅁ 미지수의 수와 방정식의 수
 https://jaredantrobus.com/teaching/2015/Summer/MA162/2.3.php

 미지수 개수 = 방정식 개수 : 단 하나의 해 (기하학적으로는 점으로 표현됩니다.)
	AX = B , B  = 0 
	AX = B,  B != 0

 미지수 개수 > 방정식 개수 : 
		(underdeterminded system)
	열의 개수(미지수) 굉장히 많지만 행의 개수(방정식) 는 그에 비해 적은, m < n.
	AX = B , B = 0 / 선형동차연립방정식 : 해가 무수히 많은 경우 : 미지수의 개수가 더 많으므로 자유변수가 생김 
	AX = B , B != 0 / 무수히 해가 많다 or 해가 하나도 없음 : 둘중 하나  / 구분을 위해서는 가우스 소거법 

 미지수 개수 < 방정식 개수:  more equation than unknown
	  	(Overdetermined system)
	행의 개수는 굉장히 많지만 열의 개수는 그에 비해 적은, m>n
	보통 해가 존재하지 않음, (다른 방정식이 종속이 아닐경우)
	overdetermined system may also have infinitely many or no solutions:
	AX = B , B  = 0 
	AX = B , B != 0 
	

  선형연립방정식과 행렬 (행렬의 상등) 
  
  행렬의 곱 + 첨가행렬 a.augment(b)
  => 선형 연립방정식을 행렬의 곱으로 표현가능 
  
  가우스 소거법 / 가우스 조던 소거법 
      기본행 연산 = 선형연립방정식의 해집합을 바꾸지 않음 
  REF 
  RREF (대각선 1 제외 전부 0 만족)  / a.rref()  
       (기본행 연산 = 행 동치)     /(ax = b)해  a.solve_right(b)) 
  
  행렬연산
  	행렬의 합  
  	행렬의 곱 (곱셈 결합법칙 성립 (AB)C = A(BC)) / 분배법칙 성립 ) / ★ 교환법칙 AB != BA 성립 X) 
	
  영행렬 (주의 AB = 0 이라도 A,B =! 0 일수 있다)(AB = AC 인데 A=!0 & B!=C 가능)
 	단위행렬 (행렬곱의 항등원)
  전치(T)행렬 (a.transpose() ) (AB)t = Bt * At (순서바뀜) 
	대각선 합 (a.trace() / trace tr(AB) = tr(BA) (같다?!) (AB는 m*m 행렬 BA 는 n*n 행렬) 

  가역행렬 / 가역행렬의 성질 
  
  역행렬  (정사각행렬 , 가역행렬 ) a.is_invertible()
  a.inverse()
    
  ㅁ기본행렬의 성질
  	기본행 연산 = 기본행렬 곱 같다 (기본행렬 만드는법 익히기!)
  	기본행렬 역행렬은 기본행렬이다 
 
   ㅁ행렬사이즈가 클때 역행렬 계산법?
   	[A : I] ->(ERO) -> [I(RREF) : A^-1]
   	(E1E2....En)A = I
   	A^-1 = E1...En
   
  ㅁ선형연립방정식 해집합 
  동차 선형 연립 방정식 - 첨가행렬의 상수항이 모두 0 (ax = 0 꼴) (a: 계수행렬 , X 미지수 행렬)
  x = 0  : a 계수행렬 모두 자유변수 
  X =! 0  : a 계수행렬 유일해 
  
  ㅁ동차 선형 연립방정식 
  미지수의 개수 n > 방정식의 개수 m 일 경우 자명하지 않은 해 
  
  ㅁ 수반 동차 선형 연립방정식
  Ax = b 에서 Ax = 0 을 수반 동차선형 연립방정식이라고 함 (상수항만 0로)
  해집합 구조 비교 
  
  영행렬 , 대칭행렬 
  
  ㅁ LU 분해법
  
  A 행렬을 상삼각행렬 L 하삼각행렬  U
	Ax = B 식을
	LUx = B 
	UX = y 라고 할때 
	Ly = B 에서 상삼각행렬 L의 첨가행렬 y를 구한 다음 
	UX = y 를 이용하여 X를 구하는 방법

   ㅁ춀레스키 분해
   A.transe =A 일때 (대칭) , x.trans *A* X > 0 일때 
   A = LL.Transe 로 분해가능 (LU 가 아닌 LL.transe)
